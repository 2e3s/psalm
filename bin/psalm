#!/usr/bin/env php
<?php

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

use Psalm\Checker\FileChecker;
use Psalm\Checker\ProjectChecker;
use Psalm\IssueBuffer;

// show all errors
error_reporting(E_ALL & ~E_STRICT & ~E_DEPRECATED & ~E_WARNING);
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
ini_set('memory_limit', '2048M');

// get options from command line
$options = getopt('f:m:', ['help', 'debug', 'config:', 'monochrome', 'show-info:', 'diff']);

if (isset($options['help'])) {
    echo <<< HELP
Usage:
    psalm [options]

Options:
    --help                  Display this help message
    --debug                 Debug information
    --config                Path to a psalm.xml configuration file
    -f [FILE_PATH]          Path to run checks against
    --monochrome            Enable monochrome output
    --show-info[=BOOLEAN]   Show non-exception parser findings.
    --diff                  File to check is a diff


HELP;

    exit;
}

// get vars from options
$debug = array_key_exists('debug', $options);
$path_to_check = isset($options['f']) ? realpath($options['f']) : null;
$path_to_config = isset($options['config']) ? realpath($options['config']) : null;
$use_color = !array_key_exists('monochrome', $options);
$show_info = isset($options['show-info'])
            ? $options['show-info'] !== 'false' && $options['show-info'] !== '0'
            : true;
$is_diff = isset($options['diff']);

if ($debug) {
    error_reporting(E_ALL & ~E_STRICT & ~E_DEPRECATED);
}

// set the cache directory for the file checker
FileChecker::setCacheDir('/var/tmp/php-parser');

// initialise custom config, if passed
if ($path_to_config) {
    ProjectChecker::setConfigXML($path_to_config);
}

ProjectChecker::$use_color = $use_color;
ProjectChecker::$show_info = $show_info;

$time = microtime(true);

if ($path_to_check === null) {
    ProjectChecker::check($debug, $is_diff);
}
elseif ($path_to_check) {
    if (is_dir($path_to_check)) {
        ProjectChecker::checkDir($path_to_check, $debug);
    }
    else {
        if ($path_to_check === __FILE__) {
            exit(0);
        }

        ProjectChecker::checkFile($path_to_check, $debug);
    }
}
else {
    die('Cannot locate ' . $options['f'] . PHP_EOL);
}

if ($debug) {
    echo('Checks took ' . (microtime(true) - $time));
    echo(' and used ' . memory_get_peak_usage() . PHP_EOL);
}
